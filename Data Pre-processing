#import dataset
df = pd.read_csv('Dataset.csv')

#check the imported data
df

#handle missing values
df_cleaned = df.dropna()

#remove duplicates
df_cleaned = df_cleaned.drop_duplicates()

#encoding categorical features
ordinal_columns = {
    'GPA': ['Pass', 'Good', 'Very Good', 'Excellent', 'GPA is not showing yet'],
    'Year': ['First Year', 'Second Year', 'Third Year', 'Above Third Year', 'Graduated'],
    'Failed Courses': ['0', '1 to 2', '3 to 4', 'More than 4'],
    'Age': ['18 - 25', '26 - 33', '34 - 41', 'Above 41'],
    'Employment Status': ['Unemployed', 'Employed part-time', 'Employed full-time', 'Own business'],
    'Program Type': [
        'Diploma with fees',
        'Free Diploma',
        'Bachelor with fees',
        'Free Bachelor',
        "Master's with fees",
        "Free Master's",
        'PHD with fees',
        'Free PHD'
    ]

}

for column_name, order in ordinal_columns.items():
    df_cleaned[column_name] = pd.Categorical(
        df_cleaned[column_name],
        categories=order,
        ordered=True
    ).codes

for column_name in df_cleaned.columns:
    if column_name not in ordinal_columns:
        label_encoder = preprocessing.LabelEncoder()
        df_cleaned[column_name] = label_encoder.fit_transform(df_cleaned[column_name])
        mapping = dict(zip(label_encoder.classes_, range(len(label_encoder.classes_))))
        print("The Encoding for Column ", column_name, " is ", mapping)

#split dataset before resampling
y = df_cleaned['Dropout']
X = df_cleaned.drop(columns=['Dropout'])
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42, stratify=y)

#calculate class distribution before resampling
class_counts = df_cleaned['Dropout'].value_counts()

#create pie chart
plt.figure(figsize=(6, 6))
class_counts.plot.pie(
    autopct='%1.1f%%',  # Display percentages
    startangle=90,      # Rotate the pie chart
    colors=['skyblue', 'orange'],  # Set custom colors
    labels=class_counts.index,     # Set class labels
    explode=[0.1, 0]    # Highlight the smaller class
)

plt.title('Class Distribution')
plt.ylabel('')  # Hide the y-axis label
plt.show()

#apply SMOTE + ENN on training set only
smote_enn = SMOTEENN(sampling_strategy=0.7, random_state=42)
X_train_resampled, y_train_resampled = smote_enn.fit_resample(X_train, y_train)

print("New training class distribution:", Counter(y_train_resampled))

#calculate class distribution after resampling
class_counts = y_train_resampled.value_counts()

#create pie chart
plt.figure(figsize=(6, 6))
class_counts.plot.pie(
    autopct='%1.1f%%',  # Display percentages
    startangle=90,      # Rotate the pie chart
    colors=['skyblue', 'orange'],  # Set custom colors
    labels=class_counts.index,     # Set class labels
    explode=[0.1, 0]    # Highlight the smaller class
)

plt.title('Class Distribution')
plt.ylabel('')  # Hide the y-axis label
plt.show()
